basePath: /api
definitions:
  controller.BadRequestResponse:
    properties:
      error:
        example: bad request
        type: string
    type: object
  controller.TaskNotFoundResponse:
    properties:
      error:
        example: Task not found
        type: string
    type: object
  entity.TaskDTO:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.TaskDeleteRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  model.TaskDeleteResponse:
    properties:
      statusCode:
        type: integer
    type: object
  model.TaskPostRequest:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  model.TaskPostResponseBody:
    properties:
      created_at:
        type: string
      id:
        type: integer
    type: object
  model.TaskPutRequest:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  model.TaskPutResponseBody:
    properties:
      id:
        type: integer
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: it's a simple rest api app that allows you to perform CRUD operations
    on tasks
  title: task_manager API
paths:
  /tasks.json:
    delete:
      consumes:
      - application/json
      description: Deletes tasks by their IDs
      parameters:
      - description: List of task IDs
        in: body
        name: ids
        required: true
        schema:
          $ref: '#/definitions/model.TaskDeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TaskDeleteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.BadRequestResponse'
      summary: Delete tasks
      tags:
      - tasks
    get:
      consumes:
      - application/json
      description: Returns a list of tasks with pagination
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Page
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.TaskDTO'
            type: array
      summary: Get a list of tasks
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Creates a new task
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.TaskPostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.TaskPostResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.BadRequestResponse'
      summary: Create a task
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Updates an existing task
      parameters:
      - description: Task data
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/model.TaskPutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.TaskPutResponseBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.BadRequestResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.TaskNotFoundResponse'
      summary: Update a task
      tags:
      - tasks
  /tasks.json/{id}:
    get:
      consumes:
      - application/json
      description: Returns a task by its identifier
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.TaskDTO'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.TaskNotFoundResponse'
      summary: Get a task by ID
      tags:
      - tasks
swagger: "2.0"
